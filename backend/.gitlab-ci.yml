include:
  - template: Security/SAST.gitlab-ci.yml



variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

stages:
  - build
  - test
  - release
  - deploy
#  - notify

build-backend-code-job:
  stage: build  
  only:
    changes:
    - backend/**/*
  cache:
    paths:
      - ${CI_PROJECT_DIR}/.m2/repository
  script:
    - cd backend
    - >
        mvn 
        package 
        -Dmaven.repo.local=${MAVEN_REPO_PATH}
        -Dversion.application=${VERSION}
        -Dspring.flyway.enabled=false
    - echo "PREV_JOB_ID=${CI_JOB_ID}" > build.env
    - echo "MAVEN_REPO_PATH=${CI_PROJECT_DIR}/.m2/repository" >> build.env
  artifacts:
    reports:
      dotenv: backend/build.env
    paths:
      - backend/target/sausage-store-${VERSION}.jar
      - ${CI_PROJECT_DIR}/.m2/
    expire_in: 1 day

build-backend-docker:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true      

spotbugs-sast:
  stage: test
  rules:
    - changes:
        - backend/**/*  
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  needs:
    - build-backend-code-job
    - build-backend-docker
   


sonarqube-backend-sast:
  stage: test
  only:
    changes:
    - backend/**/*  
  variables:
#    MAVEN_REPO_PATH: $CI_PROJECT_DIR/.m2/repository
    SONAR_PROJECT_NAME: "24_ГЛЕБФЕДОТОВ_БЭКЭНД"
  image: maven:3.8-openjdk-16
  script:
    - cd backend
    - >
        mvn 
        --batch-mode verify sonar:sonar 
        -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository 
        -Dsonar.projectName=$SONAR_PROJECT_NAME 
        -Dsonar.host.url=$SONARQUBE_URL 
        -Dsonar.login=$SONAR_LOGIN_BACKEND 
        -Dsonar.projectKey=$SONAR_PROJECT_KEY_BACK 
        -Dsonar.qualitygate.wait=true
        -Dspring.flyway.enabled=false
  needs:
    - build-backend-code-job
    - build-backend-docker  



upload-backend-release:
  stage: release
  only:
    changes:
    - backend/**/*
  needs:
    - spotbugs-sast
    - sonarqube-backend-sast
  script:
    - cd backend
    - >
        mvn 
        deploy
        -DskipTests
        -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository
        -s settings.xml
        -Dversion.application=${VERSION}
        
release-backend-docker:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/sausage-backend:$CI_COMMIT_SHA latest
  needs:   
    - spotbugs-sast
    - sonarqube-backend-sast
    

#deploy-backend:
#  stage: deploy
#  environment:
#    name: staging
#    url: http://std-024-07.praktikum-services.tech
#  before_script:
    #устанавливаем ssh-agent для удобства аутентификации по ssh
#    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
#    - eval $(ssh-agent -s)
   #сохраняем сгенеренный ранее приватный ключ для раннера
#    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#    - mkdir -p ~/.ssh
#    - chmod 600 ~/.ssh
#    - export SSH_KNOWN_HOSTS=`ssh-keyscan ${DEV_HOST}`
#    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
#  script:
#    - scp ./backend/deploy_backend.sh ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/
#    - scp ./backend/sausage-store-backend.service  ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/
#    - > 
#        ssh ${DEV_USER}@${DEV_HOST} 
#        "export "CURRENT_VERSION=${VERSION}";
#        export "VERSION=${VERSION}";
#        export "DEV_HOST=${DEV_HOST}";
#        export "DEV_USER=${DEV_USER}";
#        export "NEXUS_REPO_URL=${NEXUS_REPO_URL}";
#        export "NEXUS_REPO_BACKEND_NAME=${NEXUS_REPO_BACKEND_NAME}";
#        export "NEXUS_REPO_USER=${NEXUS_REPO_USER}";
#        export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";
#        export "PSQL_PASSWORD=${PSQL_PASSWORD}";
#        export "MONGODB_PASSWORD=${MONGODB_PASSWORD}";
#        chmod +x deploy_backend.sh; ./deploy_backend.sh; rm ./deploy_backend.sh"
#  needs:
#    - upload-backend-release

#deploy-backend-docker:
#  stage: deploy
#  image: alpine:3.18
#  before_script:
#    - apk add openssh-client bash gettext
#    - eval $(ssh-agent -s)
    
#    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#    - mkdir -p ~/.ssh
#    - chmod 700 ~/.ssh
#    - export SSH_KNOWN_HOSTS=`ssh-keyscan ${DEV_HOST}`
#    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#    - chmod 644 ~/.ssh/known_hosts
# подставим переменные в скрипт deploy.sh и выполним его на целевом хосте, где развернем сосисочный бэкенд
#  script:
#    - sed -i "s/PSQL_SECRET_PASS_PSQL/${PSQL_PASSWORD}/g" ./backend/.env
#    - sed -i "s/PSQL_SECRET_PASS_MONGODB/${MONGODB_PASSWORD}/g" ./backend/.env
#    - scp ./backend/.env  ${DEV_USER}@${DEV_HOST}:.      
#    - envsubst < ./backend/deploy-backend-docker.sh|ssh -T ${DEV_USER}@${DEV_HOST}
#  needs:
#    - release-backend-docker 


deploy:
  stage: deploy
  image: docker:24.0.7-alpine3.19
  environment:
    name: production/backend
#  variables:
#    DOCKER_HOST: ssh://${DEV_USER}@${DEV_HOST}  
  when: manual
  before_script:
    - apk add docker-cli-compose openssh-client bash gettext
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY"| tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - export SSH_KNOWN_HOSTS=`ssh-keyscan ${DEV_HOST}`
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - docker context create remote --description "remote ssh" --docker "host=ssh://${DEV_USER}@${DEV_HOST}"
  script:
    - echo "SPRING_DATASOURCE_URL=jdbc:postgresql://${PSQL_HOST}:${PSQL_PORT}/${PSQL_DBNAME}?ssl=true" >> deploy.env
    - echo "SPRING_DATASOURCE_USERNAME=std-024-07" >> deploy.env
    - echo "SPRING_DATASOURCE_PASSWORD=${PSQL_PASSWORD}" >> deploy.env
    - echo "REPORTS_MONGODB_URI="mongodb://std-024-07:${MONGODB_PASSWORD}@$rc1d-fmpc8y27lrcif391.mdb.yandexcloud.net:27018/std-024-07?tls=true"" >> deploy.env
    - echo "REPORT_PATH=/var/www-data/htdocs" >> deploy.env
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker context ls
    - docker context use remote
    - docker --context remote compose --env-file deploy.env up backend -d --pull "always" --force-recreate
  needs:
    - release-backend-docker   


#telegram-notification-backend:
#  variables:
#      TEXT: "Глеб Федотов собрал backend ${CI_PROJECT_URL}/-/jobs/${PREV_JOB_ID}/artifacts/download"
#      TLGRM: "https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage"
#  stage: notify
#  only:
#    changes:
#    - backend/**/*
#    variables:
#    - $CI_COMMIT_MESSAGE =~ /send notification/
#  script:
#    - ls backend/target/*
#    - 'curl -X POST -H "Content-type: application/json" --data "{\"chat_id\": \"-1002134018008\", \"text\": \"${TEXT}\"}" ${TLGRM}'
#  needs:
#    - build-backend-code-job


