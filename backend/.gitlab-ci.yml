include:
  - template: Security/SAST.gitlab-ci.yml


variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку

stages:
  - build
  - release
  - test
  - deploy
  - notify

build-backend-code-job:
  stage: build  
  only:
    changes:
    - backend/**/*
  cache:
    paths:
      - ${CI_PROJECT_DIR}/.m2/repository
  script:
    - cd backend
    - >
        mvn 
        package 
        -Dmaven.repo.local=${MAVEN_REPO_PATH}
        -Dversion.application=${VERSION}
    - echo "PREV_JOB_ID=${CI_JOB_ID}" > build.env
    - echo "MAVEN_REPO_PATH=${CI_PROJECT_DIR}/.m2/repository" >> build.env
  artifacts:
    reports:
      dotenv: backend/build.env
    paths:
      - backend/target/sausage-store-${VERSION}.jar
      - ${CI_PROJECT_DIR}/.m2/
    expire_in: 1 day

upload-backend-release:
  stage: release
  only:
    changes:
    - backend/**/*
  needs:
    - build-backend-code-job
  script:
    - cd backend
    - >
        mvn 
        deploy
        -DskipTests
        -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository
        -s settings.xml
        -Dversion.application=${VERSION}

spotbugs-sast:
  stage: test
  rules:
    - changes:
        - backend/**/*  
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
#    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  needs:
    - build-backend-code-job


 

sonarqube-backend-sast:
  stage: test
  only:
    changes:
    - backend/**/*  
  variables:
#    MAVEN_REPO_PATH: $CI_PROJECT_DIR/.m2/repository
    SONAR_PROJECT_NAME: "24_ГЛЕБФЕДОТОВ_БЭКЭНД"
  image: maven:3.8-openjdk-16
  script:
    - cd backend
    - >
        mvn 
        --batch-mode verify sonar:sonar 
        -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository 
        -Dsonar.projectName=$SONAR_PROJECT_NAME 
        -Dsonar.host.url=$SONARQUBE_URL 
        -Dsonar.login=$SONAR_LOGIN_BACKEND 
        -Dsonar.projectKey=$SONAR_PROJECT_KEY_BACK 
        -Dsonar.qualitygate.wait=true
  needs:
    - build-backend-code-job
    

deploy:
  stage: deploy
  before_script:
    #устанавливаем ssh-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    #сохраняем сгенеренный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - export SSH_KNOWN_HOSTS=`ssh-keyscan ${DEV_HOST}`
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - echo "$SSH_KNOWN_HOSTS"
  script:
    - ssh-keyscan ${DEV_HOST}
  needs:
    - build-backend-code-job


telegram-notification-backend:
  variables:
      TEXT: "Глеб Федотов собрал backend ${CI_PROJECT_URL}/-/jobs/${PREV_JOB_ID}/artifacts/download"
      TLGRM: "https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage"
  stage: notify
  only:
    changes:
    - backend/**/*
    variables:
    - $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - ls backend/target/*
    - 'curl -X POST -H "Content-type: application/json" --data "{\"chat_id\": \"-1002134018008\", \"text\": \"${TEXT}\"}" ${TLGRM}'
  needs:
    - build-backend-code-job


